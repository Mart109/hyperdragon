package com.example.hyperDragon.service;

import com.example.hyperDragon.dto.ClickResponse;
import com.example.hyperDragon.entity.Users;
import com.example.hyperDragon.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.Duration;
import java.time.LocalDateTime;
import java.util.Optional;

@Service
public class ClickerService {

    @Autowired
    private UserRepository userRepository;

    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∏ –±–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
    private static final int MAX_LEVEL = 1000;
    private static final int BASE_COINS_PER_LEVEL = 1000;

    @Transactional
    public ClickResponse handleClickById(Long userId) {
        try {
            System.out.println("=== handleClickById called for userId: " + userId);

            Optional<Users> userOpt = userRepository.findById(userId);
            System.out.println("User found: " + userOpt.isPresent());

            if (userOpt.isPresent()) {
                Users user = userOpt.get();
                System.out.println("User before energy restore: " + user);

                restoreEnergy(user);
                System.out.println("User after energy restore: " + user);

                if (user.getEnergy() <= 0) {
                    return createResponse(user, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏! –ü–æ–¥–æ–∂–¥–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.");
                }

                user.setEnergy(user.getEnergy() - 1);
                return processClick(user, "–ö–ª–∏–∫ —É—Å–ø–µ—à–µ–Ω!");
            }

            throw new RuntimeException("User not found with id: " + userId);

        } catch (Exception e) {
            System.err.println("ERROR in handleClickById: " + e.getMessage());
            e.printStackTrace();
            throw e;
        }
    }

    private void restoreEnergy(Users user) {
        try {
            if (user.getLastEnergyUpdate() == null) {
                user.setLastEnergyUpdate(LocalDateTime.now());
                return;
            }

            LocalDateTime now = LocalDateTime.now();
            Duration duration = Duration.between(user.getLastEnergyUpdate(), now);
            long secondsPassed = duration.getSeconds();

            int energyToRestore = (int) (secondsPassed / 1.5);

            if (energyToRestore > 0) {
                int newEnergy = Math.min(user.getEnergy() + energyToRestore, user.getMaxEnergy());
                user.setEnergy(newEnergy);
                user.setLastEnergyUpdate(now);
                System.out.println("Restored " + energyToRestore + " energy. New energy: " + newEnergy);
            }
        } catch (Exception e) {
            System.err.println("ERROR in restoreEnergy: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private ClickResponse processClick(Users user, String message) {
        user.setCoins(user.getCoins() + 1);

        checkAndUpdateLevel(user);

        Users savedUser = userRepository.save(user);
        return createResponse(savedUser, message);
    }

    /**
     * –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π: –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–±—É–µ—Ç level * 1000 –º–æ–Ω–µ—Ç
     * –£—Ä–æ–≤–µ–Ω—å 1: 1000 –º–æ–Ω–µ—Ç
     * –£—Ä–æ–≤–µ–Ω—å 2: 2000 –º–æ–Ω–µ—Ç
     * –£—Ä–æ–≤–µ–Ω—å 3: 3000 –º–æ–Ω–µ—Ç
     * ...
     * –£—Ä–æ–≤–µ–Ω—å 1000: 1,000,000 –º–æ–Ω–µ—Ç
     */
    private void checkAndUpdateLevel(Users user) {
        if (user.getLevel() >= MAX_LEVEL) {
            return; // –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        }

        int requiredCoins = (user.getLevel() + 1) * BASE_COINS_PER_LEVEL;

        if (user.getCoins() >= requiredCoins) {
            user.setLevel(user.getLevel() + 1);
            System.out.println("üéâ –£—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω –¥–æ " + user.getLevel() + "! –ù—É–∂–Ω–æ –¥–ª—è —Å–ª–µ–¥. —É—Ä–æ–≤–Ω—è: " + ((user.getLevel() + 1) * BASE_COINS_PER_LEVEL) + " –º–æ–Ω–µ—Ç");
        }
    }

    public ClickResponse getUserInfo(Long userId) {
        try {
            System.out.println("=== getUserInfo called for userId: " + userId);

            Optional<Users> userOpt = userRepository.findById(userId);

            if (userOpt.isPresent()) {
                Users user = userOpt.get();
                restoreEnergy(user);
                userRepository.save(user);
                return createResponse(user, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ");
            }

            throw new RuntimeException("User not found with id: " + userId);

        } catch (Exception e) {
            System.err.println("ERROR in getUserInfo: " + e.getMessage());
            e.printStackTrace();
            throw e;
        }
    }

    @Transactional
    public ClickResponse restoreFullEnergy(Long userId) {
        try {
            System.out.println("=== restoreFullEnergy called for userId: " + userId);

            Optional<Users> userOpt = userRepository.findById(userId);

            if (userOpt.isPresent()) {
                Users user = userOpt.get();
                user.setEnergy(user.getMaxEnergy());
                user.setLastEnergyUpdate(LocalDateTime.now());
                Users savedUser = userRepository.save(user);

                return createResponse(savedUser, "–≠–Ω–µ—Ä–≥–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!");
            }

            throw new RuntimeException("User not found with id: " + userId);

        } catch (Exception e) {
            System.err.println("ERROR in restoreFullEnergy: " + e.getMessage());
            e.printStackTrace();
            throw e;
        }
    }

    private ClickResponse createResponse(Users user, String message) {
        return new ClickResponse(
                user.getUsername(),
                user.getCoins(),
                user.getLevel(),
                user.getId(),
                user.getEnergy(),
                user.getMaxEnergy(),
                message
        );
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    @Transactional
    public ClickResponse createUserIfNotExists(String username) {
        Optional<Users> userOpt = userRepository.findByUsername(username);

        if (userOpt.isPresent()) {
            Users user = userOpt.get();
            return createResponse(user, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        }

        Users newUser = new Users(username);
        Users savedUser = userRepository.save(newUser);
        return createResponse(savedUser, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω");
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–≤–Ω–µ
     */
    public String getNextLevelInfo(Users user) {
        if (user.getLevel() >= MAX_LEVEL) {
            return "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (" + MAX_LEVEL + ")!";
        }

        int currentLevel = user.getLevel();
        int nextLevel = currentLevel + 1;
        int requiredCoins = nextLevel * BASE_COINS_PER_LEVEL;
        int coinsNeeded = requiredCoins - user.getCoins();

        return String.format(
                "–£—Ä–æ–≤–µ–Ω—å %d ‚Üí %d: –Ω—É–∂–Ω–æ %d –º–æ–Ω–µ—Ç (–æ—Å—Ç–∞–ª–æ—Å—å: %d)",
                currentLevel, nextLevel, requiredCoins, coinsNeeded
        );
    }
}