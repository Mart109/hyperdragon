from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from backend.database import Database
from backend.config import Config
from backend.security.rate_limiter import rate_limit
from backend.security.data_validator import TelegramUpdateValidator, InputValidationError
from backend.cache.decorators import async_cache
import logging
from typing import Optional, Tuple

router = Router()
logger = logging.getLogger(__name__)

# –ö—ç—à–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ 1 —á–∞—Å
@async_cache(ttl=3600, key_func=lambda user_id: f"ref_kb:{user_id}")
async def get_referral_keyboard(user_id: int) -> types.InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞",
            url=f"t.me/{Config.BOT_USERNAME}?start=ref_{user_id}"
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="üìä –ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã",
            callback_data=f"ref_stats:{user_id}"
        )
    )
    return builder.as_markup()

@router.message(Command("start"))
@rate_limit(calls=1, period=10, scope="user")  # –õ–∏–º–∏—Ç: 1 –∑–∞–ø—É—Å–∫ –≤ 10 —Å–µ–∫
async def cmd_start(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å:
    - –í–∞–ª–∏–¥–∞—Ü–∏–µ–π –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    - –ó–∞—â–∏—Ç–æ–π –æ—Ç —Å–ø–∞–º–∞
    - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        validated_data = TelegramUpdateValidator.validate_message(message)
        user_id = validated_data['user_id']
        
        # –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        referrer_id: Optional[int] = None
        if len(message.text.split()) > 1:
            try:
                _, ref_code = message.text.split()
                if ref_code.startswith("ref_"):
                    referrer_id = int(ref_code.split('_')[1])
            except (ValueError, IndexError):
                logger.warning(f"Invalid ref code from {user_id}")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ë–î
        async with Database() as db:
            if not await db.register_user(
                user_id=user_id,
                username=validated_data['from']['full_name'],
                referrer_id=referrer_id
            ):
                raise InputValidationError("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await message.answer(
                "üêâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Hype Drakon!\n\n"
                f"–í–∞—à ID: {user_id}\n"
                "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!",
                reply_markup=await get_referral_keyboard(user_id)
            )

    except InputValidationError as e:
        logger.error(f"Validation error: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.critical(f"Start command failed: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("ref_stats:"))
@rate_limit(calls=3, period=60)  # –õ–∏–º–∏—Ç 3 –∑–∞–ø—Ä–æ—Å–∞ –≤ –º–∏–Ω—É—Ç—É
async def show_referrals(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        user_id = int(callback.data.split(':')[1])
        
        # –ö—ç—à–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ë–î –Ω–∞ 5 –º–∏–Ω—É—Ç
        @async_cache(ttl=300, key_func=lambda uid: f"ref_stats:{uid}")
        async def get_stats(uid: int) -> Tuple[int, int]:
            async with Database() as db:
                count = await db.get_referrals_count(uid)
                bonus = count * Config.REFERRAL_BONUS
                return count, bonus

        count, bonus = await get_stats(user_id)
        
        await callback.message.edit_text(
            f"üìä –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: {count}\n"
            f"üí∞ –°—É–º–º–∞ –±–æ–Ω—É—Å–æ–≤: {bonus} –º–æ–Ω–µ—Ç",
            reply_markup=await get_referral_keyboard(user_id)
        )
    except Exception as e:
        logger.error(f"Referral stats error: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
@router.message.middleware
async def log_commands_middleware(handler, event, data):
    logger.info(f"Processing {event.text} from {event.from_user.id}")
    return await handler(event, data)