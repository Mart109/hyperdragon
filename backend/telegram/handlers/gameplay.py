import logging
import random
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
from typing import Dict, List

from backend.database.db import Database
from backend.config import Config
from backend.game.combat import Combat

router = Router()
logger = logging.getLogger(__name__)

class GameplayHandlers:
    def __init__(self, db: Database, combat: Combat):
        self.db = db
        self.combat = combat

    async def handle_tap(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–ø–∞ –ø–æ –¥—Ä–∞–∫–æ–Ω—É"""
        user_id = callback.from_user.id
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∏ –µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—Ä–∞–∫–æ–Ω–∞
            player = self.db.get_player(user_id)
            if not player:
                await callback.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
                return
            
            dragon = self.db.get_active_dragon(user_id)
            if not dragon:
                await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—Ä–∞–∫–æ–Ω–∞!")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
            last_tap = player.get('last_tap')
            if last_tap:
                last_tap_time = datetime.fromisoformat(last_tap) if isinstance(last_tap, str) else last_tap
                if datetime.now() - last_tap_time < timedelta(seconds=1):
                    await callback.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ 1 —Å–µ–∫—É–Ω–¥—É –º–µ–∂–¥—É —Ç–∞–ø–∞–º–∏!")
                    return

            # –†–∞—Å—á–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã
            base_reward = Config.BASE_DAMAGE
            dragon_bonus = dragon.get('attack', 0) * 0.1  # 10% –æ—Ç –∞—Ç–∞–∫–∏ –¥—Ä–∞–∫–æ–Ω–∞
            final_reward = max(1, int(base_reward + dragon_bonus))

            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ç–∞–ø
            is_critical = random.random() < Config.CRIT_CHANCE
            if is_critical:
                final_reward *= 2

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            self.db.execute(
                "UPDATE players SET coins = coins + ?, last_tap = ? WHERE user_id = ?",
                (final_reward, datetime.now().isoformat(), user_id)
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            dragon_name = dragon.get('name', '–î—Ä–∞–∫–æ–Ω')
            dragon_type = dragon.get('type', 'fire')
            
            message = (
                f"üêâ {dragon_name} ({dragon_type}) –∞—Ç–∞–∫—É–µ—Ç!\n"
                f"üí• {'–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô ' if is_critical else ''}–£–¥–∞—Ä!\n"
                f"üí∞ +{final_reward} –º–æ–Ω–µ—Ç\n"
                f"üíé –í—Å–µ–≥–æ: {player['coins'] + final_reward} –º–æ–Ω–µ—Ç"
            )

            await callback.message.edit_text(
                message,
                reply_markup=self._create_main_menu()
            )
            
        except Exception as e:
            logger.error(f"Tap error: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∞–ø–∞")

    async def handle_dragons_list(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥—Ä–∞–∫–æ–Ω–æ–≤ –∏–≥—Ä–æ–∫–∞"""
        user_id = message.from_user.id
        
        try:
            dragons = self.db.get_player_dragons(user_id)
            player = self.db.get_player(user_id)
            active_dragon_id = player.get('active_dragon_id') if player else None

            if not dragons:
                await message.answer(
                    "üêâ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä–∞–∫–æ–Ω–æ–≤!\n"
                    "–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –¥—Ä–∞–∫–æ–Ω–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ /shop",
                    reply_markup=self._create_shop_button()
                )
                return

            response = "üêâ –í–∞—à–∏ –¥—Ä–∞–∫–æ–Ω—ã:\n\n"
            keyboard_buttons = []
            
            for dragon in dragons:
                is_active = dragon['id'] == active_dragon_id
                status = "‚úÖ –ê–ö–¢–ò–í–ï–ù" if is_active else "‚ö™"
                
                response += (
                    f"{status} {dragon['name']} ({dragon['type']})\n"
                    f"‚öîÔ∏è –ê—Ç–∞–∫–∞: {dragon.get('attack', 10)} | "
                    f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞: {dragon.get('defense', 5)} | "
                    f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {dragon.get('health', 100)}\n"
                    f"‚≠ê –£—Ä–æ–≤–µ–Ω—å: {dragon.get('level', 1)} | "
                    f"üìä –û–ø—ã—Ç: {dragon.get('experience', 0)}/100\n\n"
                )
                
                if not is_active:
                    keyboard_buttons.append([
                        InlineKeyboardButton(
                            text=f"–í—ã–±—Ä–∞—Ç—å {dragon['name']}",
                            callback_data=f"select_dragon_{dragon['id']}"
                        )
                    ])

            keyboard_buttons.append([
                InlineKeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω –¥—Ä–∞–∫–æ–Ω–æ–≤", callback_data="shop_dragons"),
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
            ])

            await message.answer(
                response,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
            )
            
        except Exception as e:
            logger.error(f"Dragons list error: {e}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥—Ä–∞–∫–æ–Ω–æ–≤")

    async def handle_select_dragon(self, callback: CallbackQuery):
        """–í—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—Ä–∞–∫–æ–Ω–∞"""
        user_id = callback.from_user.id
        dragon_id = callback.data.replace("select_dragon_", "")
        
        try:
            success = self.db.set_active_dragon(user_id, dragon_id)
            
            if success:
                dragon = self.db.get_dragon(dragon_id)
                await callback.message.edit_text(
                    f"‚úÖ –¢–µ–ø–µ—Ä—å –≤–∞—à –∞–∫—Ç–∏–≤–Ω—ã–π –¥—Ä–∞–∫–æ–Ω: {dragon['name']} ({dragon['type']})!",
                    reply_markup=self._create_main_menu()
                )
            else:
                await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥—Ä–∞–∫–æ–Ω–∞")
                
        except Exception as e:
            logger.error(f"Select dragon error: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    async def handle_pvp_battle(self, callback: CallbackQuery):
        """–ù–∞—á–∞—Ç—å PvP –±–æ–π"""
        user_id = callback.from_user.id
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥—Ä–∞–∫–æ–Ω–∞
            dragon = self.db.get_active_dragon(user_id)
            if not dragon:
                await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥—Ä–∞–∫–æ–Ω–∞ –¥–ª—è –±–æ—è!")
                return

            # –ò—â–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
            all_players = self.db.fetch_all(
                "SELECT user_id FROM players WHERE user_id != ? AND active_dragon_id IS NOT NULL",
                (user_id,)
            )
            
            if not all_players:
                await callback.answer("–°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤")
                return

            opponent = random.choice(all_players)
            battle_result = self.combat.pvp_battle(user_id, opponent['user_id'])
            
            if 'error' in battle_result:
                await callback.answer(f"–û—à–∏–±–∫–∞ –±–æ—è: {battle_result['error']}")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—è
            winner_id = battle_result['winner']
            is_winner = winner_id == user_id
            is_draw = winner_id is None
            
            opponent_dragon = battle_result['player2_dragon']
            battle_log = battle_result['battle_log']
            
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç –æ –±–æ–µ
            result_text = self._format_battle_result(
                user_id, opponent['user_id'], 
                dragon, opponent_dragon,
                battle_result, is_winner, is_draw
            )
            
            # –ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –±–æ–π
            if is_winner:
                reward = 50
                self.db.execute(
                    "UPDATE players SET coins = coins + ? WHERE user_id = ?",
                    (reward, user_id)
                )
                result_text += f"\n\nüéâ –ü–æ–±–µ–¥–∞! +{reward} –º–æ–Ω–µ—Ç"
            elif is_draw:
                reward = 10
                self.db.execute(
                    "UPDATE players SET coins = coins + ? WHERE user_id = ?",
                    (reward, user_id)
                )
                result_text += f"\n\nü§ù –ù–∏—á—å—è! +{reward} –º–æ–Ω–µ—Ç"
            else:
                result_text += f"\n\nüíî –ü–æ—Ä–∞–∂–µ–Ω–∏–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"

            await callback.message.edit_text(
                result_text,
                reply_markup=self._create_main_menu(),
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(f"PvP battle error: {e}")
            await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—è")

    def _format_battle_result(self, player1_id, player2_id, dragon1, dragon2, battle_result, is_winner, is_draw):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—è –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç"""
        battle_log = battle_result['battle_log']
        
        text = "‚öîÔ∏è <b>–†–ï–ó–£–õ–¨–¢–ê–¢ –ë–û–Ø</b> ‚öîÔ∏è\n\n"
        text += f"üê≤ {dragon1['name']} ({dragon1['type']}) vs üê≤ {dragon2['name']} ({dragon2['type']})\n\n"
        
        for round_data in battle_log:
            text += f"üî∏ –†–∞—É–Ω–¥ {round_data['round']}:\n"
            text += f"   {dragon1['name']} ‚Üí {round_data['player1_damage']} —É—Ä–æ–Ω–∞\n"
            text += f"   {dragon2['name']} ‚Üí {round_data['player2_damage']} —É—Ä–æ–Ω–∞\n"
            text += f"   ‚ù§Ô∏è {round_data['player1_health']} vs {round_data['player2_health']}\n\n"
        
        if is_winner:
            text += "üéØ <b>–í–´ –ü–û–ë–ï–î–ò–õ–ò!</b> üéØ"
        elif is_draw:
            text += "ü§ù <b>–ù–ò–ß–¨–Ø!</b> ü§ù"
        else:
            text += "üíî <b>–í–´ –ü–†–û–ò–ì–†–ê–õ–ò!</b> üíî"
            
        return text

    def _create_main_menu(self):
        """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        return InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="üêâ –¢–∞–ø–Ω—É—Ç—å –¥—Ä–∞–∫–æ–Ω–∞", callback_data="tap_dragon"),
                InlineKeyboardButton(text="‚öîÔ∏è PvP –ë–æ–π", callback_data="pvp_battle")
            ],
            [
                InlineKeyboardButton(text="üìä –ú–æ–∏ –¥—Ä–∞–∫–æ–Ω—ã", callback_data="my_dragons"),
                InlineKeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")
            ],
            [
                InlineKeyboardButton(text="üë• –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
                InlineKeyboardButton(text="üìà –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data="leaderboard")
            ]
        ])

    def _create_shop_button(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –º–∞–≥–∞–∑–∏–Ω–∞"""
        return InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üõí –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop")
        ]])

def register_gameplay_handlers(dp, db: Database, combat: Combat):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    handler = GameplayHandlers(db, combat)
    
    # –¢–∞–ø –ø–æ –¥—Ä–∞–∫–æ–Ω—É
    router.callback_query(F.data == "tap_dragon")(handler.handle_tap)
    
    # –î—Ä–∞–∫–æ–Ω—ã
    router.callback_query(F.data == "my_dragons")(handler.handle_dragons_list)
    router.callback_query(F.data.startswith("select_dragon_"))(handler.handle_select_dragon)
    
    # PvP –±–æ–∏
    router.callback_query(F.data == "pvp_battle")(handler.handle_pvp_battle)
    
    dp.include_router(router)