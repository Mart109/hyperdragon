import React, { useState, useEffect } from 'react'
import './BattlePage.css'

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–∏ –ø—É—Ç–∏)
import targetImage from '../../assets/BattleDragon.png'
import dragonImage from '../../assets/dragons/dragon.jpg'

const BattlePage = () => {
  const [coins, setCoins] = useState(0)
  const [gameStarted, setGameStarted] = useState(false)
  const [gameTime, setGameTime] = useState(60)
  const [score, setScore] = useState(0)
  const [targets, setTargets] = useState([])
  const [gameInterval, setGameInterval] = useState(null)
  const [targetInterval, setTargetInterval] = useState(null)

  // –¢–∏–ø—ã –¥—Ä–∞–∫–æ–Ω–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
  const dragonTypes = [
    {
      type: 'fast',
      name: '–ë—ã—Å—Ç—Ä—ã–π –¥—Ä–∞–∫–æ–Ω',
      lifetime: 1000, // 1 —Å–µ–∫—É–Ω–¥–∞
      points: 5, // –æ—á–∫–æ–≤ –∑–∞ –ø–æ–ø–∞–¥–∞–Ω–∏–µ
      color: '#ff4444',
      size: 40, // –º–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä
    },
    {
      type: 'normal',
      name: '–û–±—ã—á–Ω—ã–π –¥—Ä–∞–∫–æ–Ω',
      lifetime: 2000, // 2 —Å–µ–∫—É–Ω–¥—ã
      points: 10,
      color: '#44aaff',
      size: 60,
    },
    {
      type: 'slow',
      name: '–ú–µ–¥–ª–µ–Ω–Ω—ã–π –¥—Ä–∞–∫–æ–Ω',
      lifetime: 4000, // 4 —Å–µ–∫—É–Ω–¥—ã
      points: 20,
      color: '#44ff44',
      size: 80, // –±–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä
    },
    {
      type: 'boss',
      name: '–ë–æ—Å—Å –¥—Ä–∞–∫–æ–Ω',
      lifetime: 6000, // 6 —Å–µ–∫—É–Ω–¥
      points: 50,
      color: '#ff44ff',
      size: 100, // —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π
    },
  ]

  // –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –º–æ–Ω–µ—Ç
  useEffect(() => {
    const savedCoins = localStorage.getItem('hypeDragon_coins')
    if (savedCoins) setCoins(parseInt(savedCoins))
  }, [])

  // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (gameInterval) clearInterval(gameInterval)
      if (targetInterval) clearInterval(targetInterval)
    }
  }, [gameInterval, targetInterval])

  const startGame = () => {
    setGameStarted(true)
    setGameTime(60)
    setScore(0)
    setTargets([])

    // –¢–∞–π–º–µ—Ä –∏–≥—Ä—ã
    const timer = setInterval(() => {
      setGameTime((prev) => {
        if (prev <= 1) {
          endGame()
          return 0
        }
        return prev - 1
      })
    }, 1000)

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–ª–µ–π - —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å —Ä–∞–∑–Ω–æ–π —á–∞—Å—Ç–æ—Ç–æ–π –ø–æ—è–≤–ª–µ–Ω–∏—è
    const targetCreator = setInterval(() => {
      createRandomTarget()
    }, 800) // –ù–æ–≤–∞—è —Ü–µ–ª—å –∫–∞–∂–¥—ã–µ 0.8 —Å–µ–∫—É–Ω–¥—ã

    setGameInterval(timer)
    setTargetInterval(targetCreator)
  }

  const createRandomTarget = () => {
    const randomType = getRandomDragonType()
    const dragonType = dragonTypes.find((dragon) => dragon.type === randomType)

    const newTarget = {
      id: Date.now() + Math.random(),
      x: Math.random() * 80 + 10, // 10-90% –ø–æ X
      y: Math.random() * 70 + 15, // 15-85% –ø–æ Y
      size: dragonType.size,
      type: dragonType.type,
      lifetime: dragonType.lifetime,
      points: dragonType.points,
      color: dragonType.color,
      name: dragonType.name,
    }

    setTargets((prev) => [...prev, newTarget])

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–ª–∏ —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    setTimeout(() => {
      setTargets((prev) => prev.filter((target) => target.id !== newTarget.id))
    }, dragonType.lifetime)
  }

  // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥—Ä–∞–∫–æ–Ω–æ–≤
  const getRandomDragonType = () => {
    const random = Math.random()
    if (random < 0.4) return 'fast' // 40% - –±—ã—Å—Ç—Ä—ã–µ
    if (random < 0.7) return 'normal' // 30% - –æ–±—ã—á–Ω—ã–µ
    if (random < 0.9) return 'slow' // 20% - –º–µ–¥–ª–µ–Ω–Ω—ã–µ
    return 'boss' // 10% - –±–æ—Å—Å—ã
  }

  const hitTarget = (targetId) => {
    const target = targets.find((t) => t.id === targetId)
    if (target) {
      setTargets((prev) => prev.filter((target) => target.id !== targetId))
      setScore((prev) => prev + target.points)
    }
  }

  const endGame = () => {
    if (gameInterval) clearInterval(gameInterval)
    if (targetInterval) clearInterval(targetInterval)

    // –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥—ã (1 –º–æ–Ω–µ—Ç–∞ –∑–∞ –∫–∞–∂–¥–æ–µ –æ—á–∫–æ)
    const reward = score
    const newCoins = coins + reward
    setCoins(newCoins)
    localStorage.setItem('hypeDragon_coins', newCoins.toString())

    setGameStarted(false)
  }

  const cancelGame = () => {
    if (gameInterval) clearInterval(gameInterval)
    if (targetInterval) clearInterval(targetInterval)
    setGameStarted(false)
    setTargets([])
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ü–µ–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
  const getTargetClass = (targetType) => {
    return `target target-${targetType}`
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
  const getLifetimeText = (lifetime) => {
    return `${lifetime / 1000}—Å–µ–∫`
  }

  return (
    <div className="battle-page">
      <div className="battle-container">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <header className="battle-header">
          <div className="header-content">
            <h1 className="battle-title">‚öîÔ∏è Battle Arena</h1>
            <p className="battle-subtitle">
              –£–Ω–∏—á—Ç–æ–∂–∞–π –¥—Ä–∞–∫–æ–Ω–æ–≤ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –º–æ–Ω–µ—Ç—ã!
            </p>
          </div>
          <div className="header-decoration">
            <div className="decoration-sword">‚öîÔ∏è</div>
            <div className="decoration-shield">üõ°Ô∏è</div>
            <div className="decoration-target">üéØ</div>
          </div>
        </header>

        {/* –ë–∞–ª–∞–Ω—Å –º–æ–Ω–µ—Ç */}
        <div className="balance-section">
          <div className="balance-card">
            <div className="balance-icon">üí∞</div>
            <div className="balance-content">
              <div className="balance-title">–í–∞—à –±–∞–ª–∞–Ω—Å</div>
              <div className="balance-value">
                {coins.toLocaleString()} –º–æ–Ω–µ—Ç
              </div>
            </div>
          </div>
        </div>

        {/* –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
        <div className="battle-main">
          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∏—Ç–≤—ã */}
          <div className="battle-stats">
            <div className="stat-item">
              <div className="stat-icon">üéØ</div>
              <div className="stat-info">
                <div className="stat-value">{score}</div>
                <div className="stat-label">–ù–∞–±—Ä–∞–Ω–æ –æ—á–∫–æ–≤</div>
              </div>
            </div>
            <div className="stat-item">
              <div className="stat-icon">‚è±Ô∏è</div>
              <div className="stat-info">
                <div className="stat-value">{gameTime}s</div>
                <div className="stat-label">–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏</div>
              </div>
            </div>
            <div className="stat-item">
              <div className="stat-icon">üí∞</div>
              <div className="stat-info">
                <div className="stat-value">{score}</div>
                <div className="stat-label">–¢–µ–∫—É—â–∏–π –≤—ã–∏–≥—Ä—ã—à</div>
              </div>
            </div>
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã */}
          {!gameStarted && (
            <div className="start-section">
              <div className="game-rules">
                <h3>üéØ –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:</h3>
                <ul>
                  <li>
                    ‚Ä¢ <span style={{ color: '#ff4444' }}>–ë—ã—Å—Ç—Ä—ã–µ –¥—Ä–∞–∫–æ–Ω—ã</span>{' '}
                    - 5 –æ—á–∫–æ–≤, 1 —Å–µ–∫
                  </li>
                  <li>
                    ‚Ä¢ <span style={{ color: '#44aaff' }}>–û–±—ã—á–Ω—ã–µ –¥—Ä–∞–∫–æ–Ω—ã</span>{' '}
                    - 10 –æ—á–∫–æ–≤, 2 —Å–µ–∫
                  </li>
                  <li>
                    ‚Ä¢{' '}
                    <span style={{ color: '#44ff44' }}>–ú–µ–¥–ª–µ–Ω–Ω—ã–µ –¥—Ä–∞–∫–æ–Ω—ã</span>{' '}
                    - 20 –æ—á–∫–æ–≤, 4 —Å–µ–∫
                  </li>
                  <li>
                    ‚Ä¢ <span style={{ color: '#ff44ff' }}>–ë–æ—Å—Å –¥—Ä–∞–∫–æ–Ω—ã</span> -
                    50 –æ—á–∫–æ–≤, 6 —Å–µ–∫
                  </li>
                  <li>‚Ä¢ 1 –æ—á–∫–æ = 1 –º–æ–Ω–µ—Ç–∞ –Ω–∞–≥—Ä–∞–¥—ã</li>
                  <li>‚Ä¢ –í—Ä–µ–º—è: 60 —Å–µ–∫—É–Ω–¥</li>
                </ul>
              </div>
              <button className="start-button" onClick={startGame}>
                <span className="button-icon">üéÆ</span>
                –ù–∞—á–∞—Ç—å –±–∏—Ç–≤—É!
              </button>
            </div>
          )}

          {/* –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ */}
          {gameStarted && (
            <div className="game-field" onClick={(e) => e.stopPropagation()}>
              <div className="game-header-info">
                <div className="time-left">–û—Å—Ç–∞–ª–æ—Å—å: {gameTime}—Å</div>
                <div className="current-score">–û—á–∫–∏: {score}</div>
                <button className="cancel-button" onClick={cancelGame}>
                  ‚ùå –û—Ç–º–µ–Ω–∞
                </button>
              </div>

              {/* –¶–µ–ª–∏ */}
              {targets.map((target) => (
                <div
                  key={target.id}
                  className={getTargetClass(target.type)}
                  style={{
                    left: `${target.x}%`,
                    top: `${target.y}%`,
                    width: `${target.size}px`,
                    height: `${target.size}px`,
                    borderColor: target.color,
                  }}
                  onClick={() => hitTarget(target.id)}
                >
                  <img
                    src={targetImage}
                    alt="Target"
                    className="target-image"
                    onError={(e) => {
                      e.target.style.display = 'none'
                    }}
                  />
                  <div className="target-info">
                    <div className="target-points">+{target.points}</div>
                    <div className="target-timer">
                      {getLifetimeText(target.lifetime)}
                    </div>
                  </div>
                </div>
              ))}

              <div className="game-instruction">üéØ –ö–ª–∏–∫–∞–π –ø–æ –¥—Ä–∞–∫–æ–Ω–∞–º!</div>
            </div>
          )}
        </div>

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */}
        {!gameStarted && score > 0 && (
          <div className="results-modal">
            <div className="modal-content">
              <h2>üéâ –ë–∏—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</h2>
              <div className="results-stats">
                <div className="result-item">
                  <span className="result-label">–ù–∞–±—Ä–∞–Ω–æ –æ—á–∫–æ–≤:</span>
                  <span className="result-value">{score}</span>
                </div>
                <div className="result-item">
                  <span className="result-label">–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –º–æ–Ω–µ—Ç:</span>
                  <span className="result-value reward">{score}</span>
                </div>
                <div className="result-item">
                  <span className="result-label">–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:</span>
                  <span className="result-value">{coins.toLocaleString()}</span>
                </div>
              </div>
              <button className="play-again-button" onClick={startGame}>
                <span className="button-icon">üîÑ</span>
                –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
              </button>
            </div>
          </div>
        )}

        {/* –§—É—Ç–µ—Ä */}
        <footer className="battle-footer">
          <p>‚ú® –£–Ω–∏—á—Ç–æ–∂–∞–π –¥—Ä–∞–∫–æ–Ω–æ–≤ –∏ —Å—Ç–∞–Ω–æ–≤–∏—Å—å –∫–æ—Ä–æ–ª–µ–º –∞—Ä–µ–Ω—ã! ‚ú®</p>
        </footer>
      </div>
    </div>
  )
}

export default BattlePage
