#!/usr/bin/env python3
import asyncio
import signal
import logging
import sys
from contextlib import asynccontextmanager
from typing import Optional

from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.client.default import DefaultBotProperties

from backend.config import Config, load_config, setup_logging
from backend.database.db import Database
from backend.game.combat import Combat
from backend.telegram.bot import setup_bot
from backend.telegram.middlewares import register_middlewares
from backend.cache.redis_manager import RedisManager
from backend.monitoring.metrics import setup_metrics
from backend.monitoring.health_check import HealthChecker
from backend.utils.task_scheduler import TaskScheduler

logger = logging.getLogger(__name__)

class Application:
    def __init__(self):
        self.config: Optional[Config] = None
        self.bot: Optional[Bot] = None
        self.dp: Optional[Dispatcher] = None
        self.db: Optional[Database] = None
        self.redis: Optional[RedisManager] = None
        self.combat: Optional[Combat] = None
        self.scheduler: Optional[TaskScheduler] = None
        self.health_checker: Optional[HealthChecker] = None
        self._shutdown_event = asyncio.Event()

    @asynccontextmanager
    async def lifespan(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        await self.startup()
        try:
            yield
        finally:
            await self.shutdown()

    async def startup(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logger.info("üöÄ Starting Hype Drakon application...")
        
        try:
            # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.config = load_config()
            logger.info(f"üìç Environment: {self.config.ENVIRONMENT.value}")
            
            # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
            logger.info("üîó Connecting to Redis...")
            self.redis = RedisManager(self.config.REDIS.URL)
            await self.redis.connect()
            storage = RedisStorage(self.redis.connection)
            logger.info("‚úÖ Redis connected successfully")
            
            # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            logger.info("üóÑÔ∏è Initializing database...")
            self.db = Database()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
            test_connection = self.db.fetch_one("SELECT 1 as test")
            if test_connection:
                logger.info("‚úÖ Database connected successfully")
            else:
                raise Exception("Failed to connect to database")
            
            # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
            logger.info("‚öîÔ∏è Initializing combat system...")
            self.combat = Combat(self.db)
            logger.info("‚úÖ Combat system initialized")
            
            # 5. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
            logger.info("ü§ñ Setting up Telegram bot...")
            default = DefaultBotProperties(parse_mode="HTML")
            self.bot = Bot(
                token=self.config.TELEGRAM.BOT_TOKEN,
                default=default
            )
            self.dp = Dispatcher(storage=storage)
            
            # 6. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            logger.info("üîß Registering middlewares...")
            register_middlewares(self.dp, self.db, self.redis, self.config)
            
            logger.info("üîÑ Setting up bot handlers...")
            setup_bot(self.dp, self.db, self.combat, self.config)
            logger.info("‚úÖ Bot setup completed")
            
            # 7. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if self.config.MONITORING.ENABLE_METRICS:
                logger.info("üìä Setting up metrics...")
                setup_metrics()
                logger.info("‚úÖ Metrics setup completed")
            
            # 8. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
            logger.info("‚è∞ Starting task scheduler...")
            self.scheduler = TaskScheduler()
            await self.scheduler.start()
            
            # 9. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ health checks
            self.health_checker = HealthChecker(self.db, self.redis)
            await self.scheduler.add_interval_job(
                self.health_checker.full_check,
                name="health_check",
                minutes=5
            )
            logger.info("‚úÖ Health checks configured")
            
            # 10. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            self._setup_signal_handlers()
            
            logger.info("üéâ Application started successfully!")
            logger.info(f"üë§ Bot username: @{self.config.TELEGRAM.BOT_USERNAME}")
            logger.info(f"üìç Environment: {self.config.ENVIRONMENT.value}")
            
        except Exception as e:
            logger.critical(f"‚ùå Application startup failed: {e}", exc_info=True)
            await self.shutdown()
            sys.exit(1)

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        logger.info("üõë Shutting down application...")
        
        shutdown_tasks = []
        
        # 1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
        if self.scheduler:
            logger.info("‚è∞ Stopping task scheduler...")
            shutdown_tasks.append(self.scheduler.stop())
        
        # 2. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
        if self.bot:
            logger.info("ü§ñ Stopping bot...")
            await self.bot.session.close()
        
        # 3. –ó–∞–∫—Ä—ã—Ç–∏–µ Redis
        if self.redis:
            logger.info("üîó Closing Redis connection...")
            shutdown_tasks.append(self.redis.disconnect())
        
        # 4. –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
        if self.db:
            logger.info("üóÑÔ∏è Closing database connections...")
            self.db.conn.close()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        if shutdown_tasks:
            await asyncio.gather(*shutdown_tasks, return_exceptions=True)
        
        logger.info("‚úÖ Application shutdown complete")

    def _setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        loop = asyncio.get_running_loop()
        
        for sig in (signal.SIGINT, signal.SIGTERM):
            loop.add_signal_handler(sig, self._handle_shutdown_signal, sig)

    def _handle_shutdown_signal(self, signum):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        signal_name = signal.Signals(signum).name
        logger.info(f"üì° Received signal: {signal_name}")
        self._shutdown_event.set()

    async def _run_webhook(self):
        """–ó–∞–ø—É—Å–∫ –≤ webhook —Ä–µ–∂–∏–º–µ (–¥–ª—è production)"""
        if not self.config.TELEGRAM.WEBHOOK_URL:
            raise ValueError("WEBHOOK_URL is required for production mode")
        
        webhook_url = f"{self.config.TELEGRAM.WEBHOOK_URL}{self.config.TELEGRAM.WEBHOOK_PATH}"
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
        await self.bot.set_webhook(
            url=webhook_url,
            secret_token=self.config.TELEGRAM.WEBHOOK_SECRET if hasattr(self.config.TELEGRAM, 'WEBHOOK_SECRET') else None
        )
        
        logger.info(f"üåê Webhook set to: {webhook_url}")
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ASGI —Å–µ—Ä–≤–µ—Ä–æ–º (FastAPI, etc.)
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling –≤ production
        logger.warning("‚ö†Ô∏è Webhook mode not fully implemented, falling back to polling")
        await self._run_polling()

    async def _run_polling(self):
        """–ó–∞–ø—É—Å–∫ –≤ polling —Ä–µ–∂–∏–º–µ"""
        logger.info("üîÑ Starting bot in polling mode...")
        
        # –û—á–∏—â–∞–µ–º webhook –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        await self.bot.delete_webhook(drop_pending_updates=True)
        
        await self.dp.start_polling(
            self.bot,
            allowed_updates=self.dp.resolve_used_update_types(),
            handle_signals=False
        )

    async def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        async with self.lifespan():
            try:
                if self.config.is_production:
                    await self._run_webhook()
                else:
                    await self._run_polling()
                
                # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                await self._shutdown_event.wait()
                
            except Exception as e:
                logger.critical(f"üí• Fatal error in main loop: {e}", exc_info=True)
                raise


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    app = Application()
    
    try:
        await app.run()
    except KeyboardInterrupt:
        logger.info("üëã Application interrupted by user")
    except Exception as e:
        logger.critical(f"üí• Fatal error: {e}", exc_info=True)
        sys.exit(1)
    finally:
        logger.info("üëã Application stopped")


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    config = load_config()
    setup_logging(config)
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã Application stopped by user")
    except Exception as e:
        logger.critical(f"üí• Failed to start application: {e}", exc_info=True)
        sys.exit(1)